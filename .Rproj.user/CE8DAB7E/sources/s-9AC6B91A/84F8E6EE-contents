
---
title: "Lake Houston Data Dashboard"
output:
    flexdashboard::flex_dashboard:
      logo: logo.png
      css: styles.css
      orientation: rows
      vertical_layout: scroll
runtime: shiny

---
#### U.S. Geological Survey Texas Water Science Center
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
options(shiny.sanitize.errors = FALSE)
library(shiny)
```
  
```{r data, include=FALSE, results='hide'}
library(lubridate)
library(plotly)
library(ggplot2)
library(quantmod)
library(DT)
library(dplyr)

#Script with DataRetrieval Code
source("biodata.R")

```

Bio Data Plots
=======================================================================
Row {data-height = 900}
-----------------------------------------------------------------------
### Reservoir Storage
```{r stor, echo=FALSE, message=FALSE, warning=FALSE, fig.height = 5}

#continuous plot of storage from NWIS DVs,  with points showing sample dates
pl<- plot_ly(apr, type= 'scatter', x=~date, y =~storage, mode ='lines', line=list(color= '#0071B7'), name = 'Reservior Storage, \n Approved Data') %>%
  add_trace(data = pen, type= 'scatter', x=~date, y =~storage, mode ='lines', line=list(color= '#0071B7', dash ='dot'), name = 'Reservior Storage, \n  Provisional Data') %>%
  add_trace(data = siteA, x=~date, y=~storage, mode = 'markers', line = list(color = 'transparent'), 
              marker = list(color = 'red', size =9), name = "Sample Collected") %>%
  layout(legend = list(orientation = 'h', x = 0.5, y =-0.18, xanchor='center'), 
         xaxis = list(title = "Date"), 
         yaxis = list(title = "Reservoir Storage, in acre feet")
         )
pl

```

### Water Temperature

```{r wtemp, echo=FALSE, message=FALSE, warning=FALSE, fig.height = 5}

col<-c('#0071B7', '#60C68C')

axis1<- list(
  title='Date'
  )

b<- list(
  title="Water temperature, in degrees Celsius"
)

graph<- function(parm) {
  p<- plot_ly(bio, type='scatter', x=~date, y =parm, color = ~Site, colors=col,  mode = 'lines+markers',
              marker = list(size = 12), symbol=~Site, symbols = c('circle','x'), line=list(shape='spline', dash='dot')) %>%
    layout(xaxis= axis1 , yaxis=b, legend = list(orientation = 'h', x = 0.5, y =-0.18, xanchor='center'))
  return(p)
}

graph(bio$Wtemp)


```

Row {data-height = 900}
-----------------------------------------------------------------------

### Dissolved Oxygen

```{r DO, echo=FALSE, message=FALSE, warning=FALSE, fig.height = 5}
b<- list(
  title="Dissolved Oxygen Concentration, in mg/L"
)
graph(bio$DO)

```


### Water Transparency 
```{r WT, echo=FALSE, message=FALSE, warning=FALSE}

b<- list(
  title="Water Transparency, from Secchi disc, in inches"
)
graph(bio$Trans)

```

Row {data-height = 800}
-------------------------------------
### Phytoplankton Concentration 
```{r PhytoConc, echo=FALSE, message=FALSE, warning=FALSE, fig.width = 8, , fig.height = 5}
b<- list(
  title="Phytoplankton Total Concentration, in NU/mL"
)
graph(bio$PhytoConc)

```

### Phytoplankton Biovolume
```{r PhytoBiovol, echo=FALSE, message=FALSE, warning=FALSE, fig.width = 8, , fig.height = 5}
b<- list(
  title='Total Sample Phytoplankton Biovolume, in um^3/mL'
  )

graph(bio$Biovol)

```

Row {data-height = 100}
--------------------------------------
###Site A: Chlorophyll-a and Pheophytin-a 
```{r Site A, echo=FALSE, message=FALSE, warning=FALSE, fig.width = 8, fig.height = 6}

sn<- unique(c(as.character(bio$Site)))

chloro<- function(site, name){
  p4<- plot_ly(site, type='bar', x=~date, y =~chl, name ="Chlorophyll-a", 
             marker =list(color='rgb(0,102,204)')) %>%
  add_trace(y=~pheo, name="Pheophytin-a", marker =list(color='rgb(28,176,114)')) %>%
  layout(margin = list(t = 100), yaxis = list(title = 'Concentration, in micrograms per liter'), barmode = 'stack', title= name,
         xaxis = list(title = "Date",
           rangeselector = list(
             buttons =  list(
               list(
                 count = 3,
                 label = "3 mo",
                 step = "month",
                 stepmode = "backward"),
               list(
                 count = 6,
                 label = "6 mo",
                 step = "month",
                 stepmode = "backward"),
               list(
                 count = 1,
                 label = "1 yr",
                 step = "year",
                 stepmode = "backward"),
               list(
                 count = 1,
                 label = "YTD",
                 step = "year",
                 stepmode = "todate"),
               list(step = "all"))),
           
          rangeslider = list(type = "date")))
  return(p4)
}

chloro(siteA, sn[[1]])
```

### Site B: Chlorophyll-a and Pheophytin-a
```{r Site B, echo=FALSE, message=FALSE, warning=FALSE, fig.width = 8, fig.height = 6}

chloro(siteB, sn[[2]])

```

Bio Data Tables
=======================================================================

```{r table, echo=FALSE, message=FALSE, warning=FALSE}


#dates to strng
siteA$date<- as.character(siteA$date)
siteB$date<- as.character(siteB$date)

#create column names
header<- c("Date", "Site", "Water Temperature (Degrees Celsius)", "Dissolved Oxygen Concentration (mg/L)", "Transparency (from Secchi Depth in inches)", "Chlorophyll a Concentration (ug/L)", "Pheophytin a Concentration (ug/L)",  "Phytoplankton Total Concentration (NU/mL)", "Phytoplankton Total Biovolume (um^3/mL)",
                     "Reservoir Storage (acre-feet)")

colnames(siteA) <- header

colnames(siteB) <- header


ui <- fluidPage(
  
  # App title ----
  titlePanel(""),
  
  # Sidebar layout with input and output definitions ----
  sidebarLayout(
    
    # Sidebar panel for inputs ----
    sidebarPanel(
      
      #Select Site
      selectInput("dataset", "Select a Site:",
        choices = c("Site A: Lk Houston S Union Pacific RR Bridge nr Houston,TX", 
                    "Site B: Lk Houston at mouth of Jack's Ditch nr Houston, TX" ),
        selected = "Site B: Lk Houston at mouth of Jack's Ditch nr Houston, TX"),
      # Button
      downloadButton("downloadData", "Download")
      
    ),
    
    # Main panel for displaying outputs ----
    mainPanel(
      
      dataTableOutput("table")
      
    )
    
  )
)

# Define server logic to display and download selected file ----
server <- function(input, output) {
  
  # Reactive value for selected dataset ----
  datasetInput <- reactive({
    switch(input$dataset,
           "Site A: Lk Houston S Union Pacific RR Bridge nr Houston,TX" = siteA,
           "Site B: Lk Houston at mouth of Jack's Ditch nr Houston, TX" = siteB)
           
  })
  
  # Table of selected dataset ----
  output$table <- renderDataTable({
    datasetInput()
  })
  

  
  # Downloadable csv of selected dataset ----
  output$downloadData <- downloadHandler(
    filename = function() {
      paste(input$dataset, ".csv", sep = "")
    },
    content = function(file) {
      write.csv(datasetInput(), file, row.names = FALSE)
    }
  )
}

# Create Shiny app ----
shinyApp(ui, server, options = list(height = 800))

```


Taste and Odor Causing Compounds
=======================================================================

```{r tando, echo = FALSE}

library(shinythemes)
source("getdata.R")

sitelist<-c(unique(data$site))

ui <- fluidPage(theme = shinytheme("sandstone"),
 titlePanel("Taste and Odor Causing Compounds"),
  sidebarLayout(
    sidebarPanel(
      dateRangeInput("dates","Select Date Range",
                     start="2013-10-01",
                     end = (Sys.Date())),
      
      checkboxGroupInput("station", "Select USGS Stations", choices = sitelist, selected =sitelist),
      actionLink("selectall", "Select All"),
      
      tags$br(),
      tags$br(), 
      
      # Button
      downloadButton("downloadData", "Download Selected Data")
      
                         
   ),
    mainPanel(dataTableOutput("table"))
    )
  )

server <- function(input, output, session) {

 observe({
    #if(input$selectall == 0) return(NULL) 
    if (input$selectall%%2 == 0)
    {
    updateCheckboxGroupInput(session,"station", "Select USGS Stations", sitelist,selected=sitelist)
    }
    else
    {
    updateCheckboxGroupInput(session,"station", "Select USGS Stations", sitelist)
    }
  })


  datasetInput<- reactive({
    data %>%
    filter(date >= input$dates[1],
           date <= input$dates[2],
           site %in% input$station)
    
  })

  cols<-c("Date", "Time", "Station Number", "Station Name", "Sampling Depth (ft)", "Total Manganese concentration (ug/L",
          "Remark Code, Geosmin", "Geosmin (ng/L)", "Remark Code, MIB", "MIB (ng/L)", "Remark Code, Microcystin", "Total Microcystin (ug/L)")
  
    output$table<- renderDataTable({  
    datatable(datasetInput(),
    colnames = cols ) %>%
      formatStyle(names(data), `text-align` = 'center')
       })
   
  
   # Downloadable csv of selected dataset ----
   output$downloadData <- downloadHandler(
     filename = function() {
       paste("data", Sys.Date(), ".csv", sep = "")
     },
     content = function(file) {
       write.table(datasetInput(), file, sep = ",",  row.names = FALSE, col.names = c("Date", "Time", "Station Number", "Station Name", "Sampling Depth (ft)", "Total Manganese concentration (ug/L",
                                                                                      "Remark Code, Geosmin", "Geosmin (ng/L)", "Remark Code, MIB", "MIB (ng/L)", "Remark Code, Microcystin", "Total Micorcystin (ug/L)"))
     }
   )

}

shinyApp(ui, server, options = list(height = 800))
```